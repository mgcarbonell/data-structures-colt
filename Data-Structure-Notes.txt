What do Data Structures do?

Data structures are collections of values, the relationships among them and the functions or operations that can be applied to the data. So we can push pop sort, etc.

Why care?

The more time you spend as a dev, the more likely you'll need one of these. We can't always use arrays, some APIs or Databases will return graphs or graph representation. If you ever worked with the dom: you manipulated a tree. Ohh shiiiiiit. Lastly, interviews, they're always in interviews.

What's the best data structure? There is no best one. They each are the best for different situations. Sad face.

Map/location data, GSP application, etc.. or a code that will route you to the nearest store? Use a graph! shortest lenght, etc. 

What if we needed an ordered list with fast inserts/removals at the beginning and end? Use a linked list! (because we're only adding to the beginning and end)

Scraping nested HTML? Binary trees, the invention of Satan.

Scheduler? Highest priority task? binary heap!

Colt's suggestion: Watch something liked Link Lists and take a break (one hour, two hours, an entire day), come back watch another section and take a brea, etc.

--------------------------------------------------------------------------------

Singly Linked List: 

Obj: Define a singly linked list, compare and contrast linked lists w/ arrays, imp insertion, removal, and traversal methods.

Define: Not an array, an array is contingous in memory (mapped and indexed). A linked list contains a bunch of elements with no indeces pointing to the next element. It's like a train car. A data structure that contains a head, tail, and length property. Linked lists consist of nodes, and each node has a value and a pointer to another node or null. (remember CS50)

Singly Linked List -> each node points to a next node

Doubly Linked List -> each node points to a next node AND back to the previous node.

Comparisons with Arrays:

Lists: Don't have indexes, connected via nodes with a next pointer, ! Random acces is not allowed (we have to traverse all the way from the beginning to whatever place we want)

Arrays: Indexed in order, insertion and deletion can be expensive (if we insert or delete, everything has to be reindexed), can quickly be accessed at a specific index. 

Doubly Linked List:

All we do is add a pointer to a previous and the next node. However, while this seems simple it leads to a few larger things. 

Comparisons:

Singly Linked Lists are only one direction, whereas doubly point prev and next
DLL are almost identical to SLL except for additional pointer. 

What is a Stack?

An abstract data structure that's a collection of data. Needs to abide by a LIFO principle (last in first out vs FIFO first in first out). The last elem added to the stack will be the first removed. 

Where are stacks used? In managing function invocations, undo/redo, routing (the history object) is treated like a stack! Stacks can also be utilized in trees & graphs. 