What do Data Structures do?

Data structures are collections of values, the relationships among them and the functions or operations that can be applied to the data. So we can push pop sort, etc.

Why care?

The more time you spend as a dev, the more likely you'll need one of these. We can't always use arrays, some APIs or Databases will return graphs or graph representation. If you ever worked with the dom: you manipulated a tree. Ohh shiiiiiit. Lastly, interviews, they're always in interviews.

What's the best data structure? There is no best one. They each are the best for different situations. Sad face.

Map/location data, GSP application, etc.. or a code that will route you to the nearest store? Use a graph! shortest lenght, etc. 

What if we needed an ordered list with fast inserts/removals at the beginning and end? Use a linked list! (because we're only adding to the beginning and end)

Scraping nested HTML? Binary trees, the invention of Satan.

Scheduler? Highest priority task? binary heap!

Colt's suggestion: Watch something liked Link Lists and take a break (one hour, two hours, an entire day), come back watch another section and take a brea, etc.

--------------------------------------------------------------------------------

Singly Linked List: 

Obj: Define a singly linked list, compare and contrast linked lists w/ arrays, imp insertion, removal, and traversal methods.

Define: Not an array, an array is contingous in memory (mapped and indexed). A linked list contains a bunch of elements with no indeces pointing to the next element. It's like a train car. A data structure that contains a head, tail, and length property. Linked lists consist of nodes, and each node has a value and a pointer to another node or null. (remember CS50)

Singly Linked List -> each node points to a next node

Doubly Linked List -> each node points to a next node AND back to the previous node.

Comparisons with Arrays:

Lists: Don't have indexes, connected via nodes with a next pointer, ! Random acces is not allowed (we have to traverse all the way from the beginning to whatever place we want)

Arrays: Indexed in order, insertion and deletion can be expensive (if we insert or delete, everything has to be reindexed), can quickly be accessed at a specific index. 

Doubly Linked List:

All we do is add a pointer to a previous and the next node. However, while this seems simple it leads to a few larger things. 

Comparisons:

Singly Linked Lists are only one direction, whereas doubly point prev and next
DLL are almost identical to SLL except for additional pointer. 

What is a Stack?

An abstract data structure that's a collection of data. Needs to abide by a LIFO principle (last in first out vs FIFO first in first out). The last elem added to the stack will be the first removed. 

Where are stacks used? In managing function invocations, undo/redo, routing (the history object) is treated like a stack! Stacks can also be utilized in trees & graphs. 

Queues are a sister data structure to stacks. You add in data and remove it. It's order however is different: it's FIFO - first in first out. 

Where are queues used? Background tasks, uploading/downloading resources, printing/task processing

TREES!

Are the devil. It's a classic data structure and commonly used. 

Objectives: Define a tree, compare and contrast trees & lists, explain differences between trees, binary trees, and binary search trees.

What is a tree? A data struct that consists of nodes in a parent/child relationship. 

Whereas lists are linear data structures, one thing and the next, Trees are NONLINEAR. They can branch, they can have more than 1 path. They can have many nodes linked to one node, etc.

There are some rules to trees, a node can only point to a child. A child can't point to a parent, a sibling can't point to each other. Every node is moving away from the root node. There must also be ONE entry point. 

Tree Terminology:
ROOT - the top node in a tree
CHILD - a node directly connected to antoher node when moving away from the Root.
PARENT - Converse notion of a child.
SIBLINGS - a group of nodes with the same parent.
LEAF - a node with no children.
EDGE - the connection between one node and another.

Applications of trees? 
The DOM! nodes, parents, etc.

Networking Routing. Delivery schemes, topology, distance

Abstract Syntax Trees. Describes the syntax of a programming language

Artificial Intelligence - Minimax tree (breaking down logic of a tictactoe game) or a decision tree.

Computer file tree structures

JSON! 

Kinds of Trees:

Many variets of trees, BINARY TREES, B-TREES, BINARY SEARCH TREES, HEAPS, radix tree, multiway trees, decision trees, suffix trees, queap, treap, threaded binary tree, tango tree, self-balancing search tree. HASHES! 

We'll be talking mainly about binary trees. The root of a Binary tree will only have 2 children. 

In parent/child nodes the left will be smaller, the right will be larger.

How do BSTS (Binary Search Trees) work?
* Every parent node has AT MOST TWO children.
* Every node to the LEFT of a parent node is ALWAYS LESS than the parent.
* Every node to the RIGHT of a parent node is ALWAYS GREATER than the parent.

TREE TRAVERSAL:
Various methods, like Depth First Search (DFS) which goes down or Breadth First Search which goes across (BFS)

DFS - InOrder (work from top down)
DFS - PreOrder
DFS - PostOrder (work from bottom up)

There are certain situations where you want to use one over another. But there are many ways to visit things in a tree.

When to use BFS and DFS: BFS? DFS? Which is better?

It depends! The engineer answer.

Wide Tree:
BFS utilizes a queue in an array, we would need to store a lot of data in memory, so the space complexity could grow really big on a wide tree. 

Ex: 
What about InOrder, PostOrder, PreOrder? Why use them? If we wanted to take a huge BST and use InOrder, we'd end up with a set of all of its nodes in order. This could be useful to grab them from a list. 

PreOrder will go from root, left side, then right side. Could be useful if we wanted to clone, dup, or save a tree (flatten it). its given in an order where we could reconstruct the order. We immediately know the root because it comes at the beginning.

BINARY HEAPS:
A heap is a category of a tree. Everything that applies to trees apply to heats, but heaps have some extra rules. What are our objectives? Define what a binary heap is, compare and contrast min and max heaps, implement basic methods on a heap (max heap), underwhat where heaps are used in the real world and what other data structures can be constructed from heaps!

So what is a binary heap? A heap is a tree structure. In max binary heaps parent nodes are always larger than children nodes. In min binary heaps parent nodes are always smaller than child nodes. There's no real order to how they are laid out. 

A valid heap:             not a binary heap (it's a BST):
        41                        33
    39      33                18      41
  18  27  12                12  27  39

Some rules regarding Max Binary Heaps:
* Each parent has at most two child nodes.
* The value of each parent node is always greater than its child nodes.
* In a max binary Heap the parent is greater than the children, but there are no guarantees between sibling nodes.
* A binary heap is as COMPACT AS POSSIBLE. All the children of each node are as full as they can be and the left children are filled out first.
Example:
          100
      19        36   <- children nodes are smaller than parents.
  17     3   25    1 <- no implied ordering between siblings
2   7                <- left filled out first.

Why do we care about heaps? Binary heaps are used to implement priority queues which are very commonly used data structures. We'll implement one! We also use them in graph traversal algorithms, pretty important stuff.

HASH TABLES:

We use them a lot, and they're widely used. Nearly every programming language has some sort of hash table data structures. This is because of their speed, hash tables are very commonly used. 

Hash tables in the wild:
- Python has Dictionaries
- JS has Objects and Maps*
- Java, Go, & Scala have Maps
- Ruby has... HASHES
* Objects have some restrictions, but are basically hash tables

Hash tables: Introductory Examples - 

If all hash tables disappeared, imagine we want to store some colors. We could always just use an array/list: ['#ff69b4', '#etc'] but it doesn't tell us much.
Something like, pink -> #ff69b4, color -> #etc, etc. or colors["pink"] rather than colors[0]. However, a computer doesn't super know what to do with colors["pink"], so instead we need to make a key/value pair.